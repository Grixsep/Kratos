"//\n"
"//   Copyright 2013 Pixar\n"
"//\n"
"//   Licensed under the Apache License, Version 2.0 (the \"Apache License\")\n"
"//   with the following modification; you may not use this file except in\n"
"//   compliance with the Apache License and the following modification to it:\n"
"//   Section 6. Trademarks. is deleted and replaced with:\n"
"//\n"
"//   6. Trademarks. This License does not grant permission to use the trade\n"
"//      names, trademarks, service marks, or product names of the Licensor\n"
"//      and its affiliates, except as required to comply with Section 4(c) of\n"
"//      the License and to reproduce the content of the NOTICE file.\n"
"//\n"
"//   You may obtain a copy of the Apache License at\n"
"//\n"
"//       http://www.apache.org/licenses/LICENSE-2.0\n"
"//\n"
"//   Unless required by applicable law or agreed to in writing, software\n"
"//   distributed under the Apache License with the above modification is\n"
"//   distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n"
"//   KIND, either express or implied. See the Apache License for the specific\n"
"//   language governing permissions and limitations under the Apache License.\n"
"//\n"
"\n"
"#if __VERSION__ < 420\n"
"    #define centroid\n"
"#endif\n"
"\n"
"layout(std140) uniform Transform {\n"
"    mat4 ModelViewMatrix;\n"
"    mat4 ProjectionMatrix;\n"
"    mat4 ModelViewProjectionMatrix;\n"
"};\n"
"\n"
"//--------------------------------------------------------------\n"
"// Vertex Shader\n"
"//--------------------------------------------------------------\n"
"#ifdef VERTEX_SHADER\n"
"\n"
"layout (location=0) in vec4 position;\n"
"layout (location=1) in vec4 data;\n"
"\n"
"out block {\n"
"    vec4 position;\n"
"    vec4 data;\n"
"} outpt;\n"
"\n"
"void main()\n"
"{\n"
"    outpt.position = ModelViewMatrix * position;\n"
"    outpt.data = data;\n"
"}\n"
"\n"
"#endif\n"
"\n"
"\n"
"//--------------------------------------------------------------\n"
"// Geometry Shader\n"
"//--------------------------------------------------------------\n"
"#ifdef GEOMETRY_SHADER\n"
"\n"
"layout(points) in;\n"
"\n"
"#define NVERTS 4\n"
"\n"
"layout(triangle_strip, max_vertices = NVERTS) out;\n"
"\n"
"in block {\n"
"    vec4 position;\n"
"    vec4 data;\n"
"} inpt[];\n"
"\n"
"out block {\n"
"    vec4 position;\n"
"    centroid vec2 uv;\n"
"    flat int colorId;\n"
"} outpt;\n"
"\n"
"void emit(int index, vec2 offset, vec2 uv)\n"
"{\n"
"    outpt.position = inpt[0].position;\n"
"    outpt.uv = uv;\n"
"    outpt.colorId = int(inpt[0].data.w);\n"
"\n"
"    gl_Position = (ProjectionMatrix * inpt[0].position) + vec4(offset, -0.01, 0.0);\n"
"    EmitVertex();\n"
"}\n"
"\n"
"#define FONT_TEXTURE_WIDTH 128\n"
"#define FONT_TEXTURE_HEIGHT 128\n"
"#define FONT_TEXTURE_COLUMNS 16\n"
"#define FONT_TEXTURE_ROWS 8\n"
"\n"
"#define FONT_CHAR_WIDTH (FONT_TEXTURE_WIDTH/FONT_TEXTURE_COLUMNS)\n"
"#define FONT_CHAR_HEIGHT (FONT_TEXTURE_HEIGHT/FONT_TEXTURE_ROWS)\n"
"\n"
"vec2 computeUV( int c ) \n"
"{\n"
"    c = c % 0x7f;\n"
"\n"
"    return vec2( float(c%FONT_TEXTURE_COLUMNS)/float(FONT_TEXTURE_COLUMNS),\n"
"                 float(c/FONT_TEXTURE_COLUMNS)/float(FONT_TEXTURE_ROWS)     );\n"
"\n"
"}\n"
"\n"
"uniform float scale=0.01;\n"
"\n"
"void main()\n"
"{\n"
"    gl_PrimitiveID = gl_PrimitiveIDIn;\n"
"\n"
"    vec2 uv = computeUV(int(inpt[0].data.z));\n"
"\n"
"    vec2 dim = vec2(1.0/FONT_TEXTURE_COLUMNS, \n"
"                    1.0/FONT_TEXTURE_ROWS);\n"
"\n"
"    vec2 ofs = inpt[0].data.xy;\n"
"\n"
"    vec4 clipPos = ProjectionMatrix * inpt[0].position;\n"
"\n"
"    float s = scale * clipPos.w;\n"
"\n"
"    emit(0, s * (vec2( 1.0, -2.0)+ofs), uv + dim);\n"
"    emit(1, s * (vec2( 1.0,  2.0)+ofs), vec2(uv.x+dim.x, uv.y));\n"
"    emit(2, s * (vec2(-1.0, -2.0)+ofs), vec2(uv.x,       uv.y+dim.y));\n"
"    emit(3, s * (vec2(-1.0,  2.0)+ofs), uv);\n"
"\n"
"    EndPrimitive();\n"
"}\n"
"\n"
"#endif\n"
"\n"
"//--------------------------------------------------------------\n"
"// Fragment Shader\n"
"//--------------------------------------------------------------\n"
"#ifdef FRAGMENT_SHADER\n"
"\n"
"in block {\n"
"    vec4 position;\n"
"    centroid vec2 uv;\n"
"    flat int colorId;\n"
"} inpt;\n"
"\n"
"uniform sampler2D font;\n"
"\n"
"out vec4 outColor;\n"
"out vec3 outNormal;\n"
"\n"
"const vec4 colors[9] = vec4[9](vec4(0.9,0.9,0.9,1.0),\n"
"\n"
"                               vec4(1.0,0.3,0.3,1.0),\n"
"                               vec4(0.3,1.0,0.3,1.0),\n"
"                               vec4(0.3,0.3,1.0,1.0),\n"
"                               \n"
"                               vec4(0.0,1.0,0.0,1.0),     // green --- yellow --- red\n"
"                               vec4(0.5,1.0,0.0,1.0),\n"
"                               vec4(1.0,1.0,0.0,1.0),\n"
"                               vec4(1.0,0.5,0.0,1.0),\n"
"                               vec4(1.0,0.0,0.0,1.0));\n"
"\n"
"void main()\n"
"{\n"
"    vec4 bitmap = texture(font, inpt.uv);\n"
"    if (bitmap.a == 0.0) discard;\n"
"\n"
"    outColor = bitmap * colors[inpt.colorId];\n"
"    outNormal = vec3(0.0,0.0,1.0);\n"
"    //outColor = vec4(inpt.v.uv,0.0,1.0);\n"
"}\n"
"\n"
"#endif\n"
"\n"
"\n"
