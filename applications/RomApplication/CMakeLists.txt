set(CMAKE_INCLUDE_CURRENT_DIR ON)

message("**** configuring KratosRomApplication ****")

################### PYBIND11
include(pybind11Tools)

add_definitions( -DEIGEN_MPL2_ONLY)

include_directories(
    ${KRATOS_SOURCE_DIR}/kratos
    SYSTEM ${KRATOS_SOURCE_DIR}/applications/LinearSolversApplication/external_libraries/eigen3
    SYSTEM ${KRATOS_SOURCE_DIR}/applications/LinearSolversApplication/
)

if( USE_EIGEN_MKL MATCHES ON )
    if( DEFINED ENV{MKLROOT} )
        message( "-- MKLROOT = $ENV{MKLROOT}" )

        include_directories( SYSTEM $ENV{MKLROOT}/include )

        link_directories("$ENV{MKLROOT}/lib")

        if( NOT MSVC )
            set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m64 -L$ENV{MKLROOT}/lib/intel64 -Wl,--no-as-needed -lpthread -lm -ldl" )
        endif()
    elseif( DEFINED ENV{CONDA_PREFIX} )
        message("-- Found Conda environment: $ENV{CONDA_PREFIX}")

        if( WIN32 )
            include_directories(SYSTEM $ENV{CONDA_PREFIX}/Library/include)
            link_directories("$ENV{CONDA_PREFIX}/Library/lib")
        else()
            include_directories(SYSTEM $ENV{CONDA_PREFIX}/include)
            link_directories("$ENV{CONDA_PREFIX}/lib")
        endif()
    else()
        message( FATAL_ERROR "MKLROOT not defined" )
    endif()

    add_definitions( -DUSE_EIGEN_MKL -DEIGEN_USE_MKL_ALL )
endif()

## RomApplication Core sources
file(GLOB_RECURSE KRATOS_ROM_APPLICATION_CORE
    ${CMAKE_CURRENT_SOURCE_DIR}/rom_application.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/rom_application_variables.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_conditions/*.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_elements/*.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_modelers/*.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_processes/*.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_utilities/*.cpp
)

## RomApplication testing sources
if(${KRATOS_BUILD_TESTING} MATCHES ON)
    file(GLOB_RECURSE KRATOS_ROM_APPLICATION_TESTING_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/tests/cpp_tests/*.cpp)
endif(${KRATOS_BUILD_TESTING} MATCHES ON)

## RomApplication python interface sources
file(GLOB_RECURSE KRATOS_ROM_APPLICATION_PYTHON_INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}/custom_python/*.cpp)

add_library(KratosRomApplicationCore SHARED ${KRATOS_ROM_APPLICATION_CORE} ${KRATOS_ROM_APPLICATION_TESTING_SOURCES})
target_link_libraries(KratosRomApplicationCore PUBLIC KratosCore)
set_target_properties(KratosRomApplicationCore PROPERTIES COMPILE_DEFINITIONS "ROM_APPLICATION=EXPORT,API")

###############################################################
## define library Kratos which defines the basic python interface
pybind11_add_module(KratosRomApplication MODULE THIN_LTO ${KRATOS_ROM_APPLICATION_PYTHON_INTERFACE})
target_link_libraries(KratosRomApplication PRIVATE KratosRomApplicationCore)
set_target_properties(KratosRomApplication PROPERTIES PREFIX "")

# Set batch size in the unity build
IF(CMAKE_UNITY_BUILD MATCHES ON)
    set_target_properties(KratosRomApplicationCore PROPERTIES UNITY_BUILD_BATCH_SIZE ${KRATOS_UNITY_BUILD_BATCH_SIZE})
    set_target_properties(KratosRomApplication PROPERTIES UNITY_BUILD_BATCH_SIZE ${KRATOS_UNITY_BUILD_BATCH_SIZE})
ENDIF(CMAKE_UNITY_BUILD MATCHES ON)

if( USE_EIGEN_MKL MATCHES ON )
    if( MSVC )
        find_library(MKL_RT_LIB mkl_rt)
        if(NOT MKL_RT_LIB)
            message( FATAL_ERROR "mkl_rt.lib not found")
        else(NOT MKL_RT_LIB)
            message( "mkl_rt.lib found at: ${MKL_RT_LIB}")
            target_link_libraries( KratosLinearSolversCore PUBLIC ${MKL_RT_LIB} )
        endif(NOT MKL_RT_LIB)
    elseif( ${CMAKE_CXX_COMPILER_ID} MATCHES Clang )
        message( FATAL_ERROR "Clang does not yet support MKL" )
    else( MSVC )
        target_link_libraries( KratosLinearSolversCore PUBLIC mkl_rt )
        if( USE_EIGEN_FEAST MATCHES ON )
            target_link_libraries(KratosLinearSolversCore PUBLIC feast4 gfortran m)
        endif()
    endif( MSVC )
endif()

# changing the .dll suffix to .pyd (Windows)
if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
    set_target_properties(KratosRomApplication PROPERTIES SUFFIX .pyd)
endif(${CMAKE_SYSTEM_NAME} MATCHES "Windows")

# changing the .dylib suffix to .so (OS X)
if(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
    set_target_properties(KratosRomApplication PROPERTIES SUFFIX .so)
endif(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")

# Add to the KratosMultiphisics Python module
kratos_python_install(${INSTALL_PYTHON_USING_LINKS} ${CMAKE_CURRENT_SOURCE_DIR}/RomApplication.py KratosMultiphysics/RomApplication/__init__.py )

# Install python files
get_filename_component (CURRENT_DIR_NAME ${CMAKE_CURRENT_SOURCE_DIR} NAME)
kratos_python_install_directory(${INSTALL_PYTHON_USING_LINKS} ${CMAKE_CURRENT_SOURCE_DIR}/python_scripts KratosMultiphysics/${CURRENT_DIR_NAME} )


# Kratos Testing. Install everything except sources to ensure that reference and configuration files are copied.
if(${INSTALL_TESTING_FILES} MATCHES ON )
    get_filename_component (CURRENT_DIR_NAME ${CMAKE_CURRENT_SOURCE_DIR} NAME)
    install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/tests DESTINATION applications/${CURRENT_DIR_NAME}
        PATTERN "*.git" EXCLUDE
        PATTERN "*.c" EXCLUDE
        PATTERN "*.h" EXCLUDE
        PATTERN "*.cpp" EXCLUDE
        PATTERN "*.hpp" EXCLUDE
  )
endif(${INSTALL_TESTING_FILES} MATCHES ON)

install(TARGETS KratosRomApplicationCore DESTINATION libs )
install(TARGETS KratosRomApplication DESTINATION libs )

# Define custom targets
set(KRATOS_KERNEL "${KRATOS_KERNEL};KratosRomApplicationCore" PARENT_SCOPE)
set(KRATOS_PYTHON_INTERFACE "${KRATOS_PYTHON_INTERFACE};KratosRomApplication" PARENT_SCOPE)