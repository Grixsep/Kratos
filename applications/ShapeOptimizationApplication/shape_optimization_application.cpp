// ==============================================================================
//  KratosShapeOptimizationApplication
//
//  License:         BSD License
//                   license: ShapeOptimizationApplication/license.txt
//
//  Main authors:    Baumgaertner Daniel, https://github.com/dbaumgaertner
//                   Geiser Armin, https://github.com/armingeiser
//
// ==============================================================================

// ------------------------------------------------------------------------------
// System includes
// ------------------------------------------------------------------------------

// ------------------------------------------------------------------------------
// External includes
// ------------------------------------------------------------------------------

// ------------------------------------------------------------------------------
// Project includes
// ------------------------------------------------------------------------------
#include "includes/define.h"
#include "includes/variables.h"
#include "shape_optimization_application.h"

// ==============================================================================

namespace Kratos
{
    // Geometry variables
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(NORMALIZED_SURFACE_NORMAL);

    // Optimization variables
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(DF1DX);

    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(DF1DX_MAPPED);

    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(DC1DX);
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(DC2DX);
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(DC3DX);
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(DC4DX);
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(DC5DX);
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(DC6DX);
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(DC7DX);
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(DC8DX);
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(DC9DX);

    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(DC1DX_MAPPED);
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(DC2DX_MAPPED);
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(DC3DX_MAPPED);
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(DC4DX_MAPPED);
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(DC5DX_MAPPED);
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(DC6DX_MAPPED);
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(DC7DX_MAPPED);
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(DC8DX_MAPPED);
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(DC9DX_MAPPED);

    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(SEARCH_DIRECTION);
    KRATOS_CREATE_VARIABLE(double, INV_HESSIAN);
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(CORRECTION);
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(PROJECTION);
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(CONTROL_POINT_UPDATE);
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(CONTROL_POINT_CHANGE);
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(SHAPE_UPDATE);
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(SHAPE_CHANGE);
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(MESH_CHANGE);

    // For thickness
    KRATOS_CREATE_VARIABLE(double, THICKNESS_SENSITIVITY);

    KRATOS_CREATE_VARIABLE(double, DF1DT);
    KRATOS_CREATE_VARIABLE(double, DF1DT_MAPPED);
    KRATOS_CREATE_VARIABLE(double, DF1DT_PROJECTED);

    KRATOS_CREATE_VARIABLE(double, LB_values);
    KRATOS_CREATE_VARIABLE(double, LB_buffer_coeff);
    KRATOS_CREATE_VARIABLE(double, DLBDT);
    KRATOS_CREATE_VARIABLE(double, DLBDT_MAPPED);
    KRATOS_CREATE_VARIABLE(double, UB_values);
    KRATOS_CREATE_VARIABLE(double, UB_buffer_coeff);
    KRATOS_CREATE_VARIABLE(double, DUBDT);
    KRATOS_CREATE_VARIABLE(double, DUBDT_MAPPED);

    KRATOS_CREATE_VARIABLE(double, DC1DT);
    KRATOS_CREATE_VARIABLE(double, DC1DT_MAPPED);
    KRATOS_CREATE_VARIABLE(double, DC1DT_PROJECTED);
    KRATOS_CREATE_VARIABLE(double, DC2DT);
    KRATOS_CREATE_VARIABLE(double, DC2DT_MAPPED);
    KRATOS_CREATE_VARIABLE(double, DC2DT_PROJECTED);
    KRATOS_CREATE_VARIABLE(double, DC3DT);
    KRATOS_CREATE_VARIABLE(double, DC3DT_MAPPED);
    KRATOS_CREATE_VARIABLE(double, DC3DT_PROJECTED);
    KRATOS_CREATE_VARIABLE(double, DC4DT);
    KRATOS_CREATE_VARIABLE(double, DC4DT_MAPPED);
    KRATOS_CREATE_VARIABLE(double, DC4DT_PROJECTED);
    KRATOS_CREATE_VARIABLE(double, DC5DT);
    KRATOS_CREATE_VARIABLE(double, DC5DT_MAPPED);
    KRATOS_CREATE_VARIABLE(double, DC5DT_PROJECTED);
    KRATOS_CREATE_VARIABLE(double, DC6DT);
    KRATOS_CREATE_VARIABLE(double, DC6DT_MAPPED);
    KRATOS_CREATE_VARIABLE(double, DC6DT_PROJECTED);
    KRATOS_CREATE_VARIABLE(double, DC7DT);
    KRATOS_CREATE_VARIABLE(double, DC7DT_MAPPED);
    KRATOS_CREATE_VARIABLE(double, DC7DT_PROJECTED);
    KRATOS_CREATE_VARIABLE(double, DC8DT);
    KRATOS_CREATE_VARIABLE(double, DC8DT_MAPPED);
    KRATOS_CREATE_VARIABLE(double, DC8DT_PROJECTED);
    KRATOS_CREATE_VARIABLE(double, DC9DT);
    KRATOS_CREATE_VARIABLE(double, DC9DT_MAPPED);
    KRATOS_CREATE_VARIABLE(double, DC9DT_PROJECTED);

    KRATOS_CREATE_VARIABLE(double, INV_HESSIAN_THICKNESS);

    KRATOS_CREATE_VARIABLE(double, THICKNESS_SEARCH_DIRECTION);
    KRATOS_CREATE_VARIABLE(double, THICKNESS_CORRECTION);
    KRATOS_CREATE_VARIABLE(double, THICKNESS_PROJECTION);

    KRATOS_CREATE_VARIABLE(double, THICKNESS_CONTROL);
    KRATOS_CREATE_VARIABLE(double, THICKNESS_CONTROL_UPDATE);
    KRATOS_CREATE_VARIABLE(double, THICKNESS_CONTROL_CHANGE);

    KRATOS_CREATE_VARIABLE(double, THICKNESS);
    KRATOS_CREATE_VARIABLE(double, THICKNESS_ELEMENTAL);
    KRATOS_CREATE_VARIABLE(double, THICKNESS_ELEMENTAL_INITIAL);
    KRATOS_CREATE_VARIABLE(double, THICKNESS_UPDATE);
    KRATOS_CREATE_VARIABLE(double, THICKNESS_CHANGE);

    // for thickness optimization with change as design variable
    KRATOS_CREATE_VARIABLE(double, THICKNESS_INITIAL);
    KRATOS_CREATE_VARIABLE(double, THICKNESS_CHANGE_CONTROL);
    KRATOS_CREATE_VARIABLE(double, THICKNESS_CHANGE_CONTROL_PROJECTED);
    KRATOS_CREATE_VARIABLE(double, THICKNESS_CONTROL_PROJECTED_UPDATE);

    // For edge damping
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(DAMPING_FACTOR);

    // For thickness damping
    KRATOS_CREATE_VARIABLE(double,DAMPING_FACTOR_T);

    // For Mapping
    KRATOS_CREATE_VARIABLE(int,MAPPING_ID);

    // For adaptive filter
    KRATOS_CREATE_VARIABLE(double,VERTEX_MORPHING_RADIUS);
    KRATOS_CREATE_VARIABLE(double,VERTEX_MORPHING_RADIUS_RAW);
    KRATOS_CREATE_VARIABLE(double,GAUSSIAN_CURVATURE);
    KRATOS_CREATE_VARIABLE(double,MAX_NEIGHBOUR_DISTANCE);

    // For bead optimization
    KRATOS_CREATE_VARIABLE(double,ALPHA);
    KRATOS_CREATE_VARIABLE(double,ALPHA_MAPPED);
    KRATOS_CREATE_VARIABLE(double,DF1DALPHA);
    KRATOS_CREATE_VARIABLE(double,DF1DALPHA_MAPPED);
    KRATOS_CREATE_VARIABLE(double,DPDALPHA);
    KRATOS_CREATE_VARIABLE(double,DPDALPHA_MAPPED);
    KRATOS_CREATE_VARIABLE(double,DLDALPHA);
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(BEAD_DIRECTION);

    // For shape fraction optimization
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(DP1DX);
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(DPF1DX);

    // For auxiliary operations
    KRATOS_CREATE_VARIABLE(double,SCALAR_VARIABLE);
    KRATOS_CREATE_VARIABLE(double,SCALAR_VARIABLE_MAPPED);
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(VECTOR_VARIABLE);
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(VECTOR_VARIABLE_MAPPED);

    // For in plane mapping operations
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(BACKGROUND_COORDINATE);
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(BACKGROUND_NORMAL);
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(OUT_OF_PLANE_DELTA);

    // For face angle response
    KRATOS_CREATE_VARIABLE(bool, CONSIDER_FACE_ANGLE);

    // For water drain response
    KRATOS_CREATE_VARIABLE(double, WATER_LEVEL);
    KRATOS_CREATE_VARIABLE(int, WATER_VOLUMES);

    // For directional derivative response
    KRATOS_CREATE_VARIABLE(GlobalPointersVector<Condition>, ADJACENT_FACES);

	// For sensitivity heatmap
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(HEATMAP_DF1DX);
    KRATOS_CREATE_VARIABLE(double, HEATMAP_DF1DALPHA);

	KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(HEATMAP_DC1DX);
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(HEATMAP_DC2DX);
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(HEATMAP_DC3DX);
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(HEATMAP_DC4DX);
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(HEATMAP_DC5DX);
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(HEATMAP_DC6DX);
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(HEATMAP_DC7DX);
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(HEATMAP_DC8DX);
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(HEATMAP_DC9DX);

    KRATOS_CREATE_VARIABLE(double, HEATMAP_MAX);
    KRATOS_CREATE_VARIABLE(double, HEATMAP_L2);

    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(DF1DX_WEIGHTED);
    KRATOS_CREATE_VARIABLE(double, DF1DALPHA_WEIGHTED);

	KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(DC1DX_WEIGHTED);
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(DC2DX_WEIGHTED);
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(DC3DX_WEIGHTED);
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(DC4DX_WEIGHTED);
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(DC5DX_WEIGHTED);
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(DC6DX_WEIGHTED);
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(DC7DX_WEIGHTED);
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(DC8DX_WEIGHTED);
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(DC9DX_WEIGHTED);

    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(DF1DX_WEIGHTED_MAPPED);
    KRATOS_CREATE_VARIABLE(double, DF1DALPHA_WEIGHTED_MAPPED);

	KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(DC1DX_WEIGHTED_MAPPED);
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(DC2DX_WEIGHTED_MAPPED);
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(DC3DX_WEIGHTED_MAPPED);
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(DC4DX_WEIGHTED_MAPPED);
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(DC5DX_WEIGHTED_MAPPED);
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(DC6DX_WEIGHTED_MAPPED);
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(DC7DX_WEIGHTED_MAPPED);
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(DC8DX_WEIGHTED_MAPPED);
    KRATOS_CREATE_3D_VARIABLE_WITH_COMPONENTS(DC9DX_WEIGHTED_MAPPED);

    // Eof variables

    KratosShapeOptimizationApplication::KratosShapeOptimizationApplication() :
        KratosApplication("ShapeOptimizationApplication")
    {}

 	void KratosShapeOptimizationApplication::Register()
 	{
        KRATOS_INFO("") << "    KRATOS   __| |  |   \\   _ \\ __|\n"
                        << "           \\__ \\ __ |  _ \\  __/ _|\n"
                        << "           ____/_| _|_/  _\\_|  ___| OPTIMIZATION\n"
                        << "Initializing KratosShapeOptimizationApplication..." << std::endl;

        // Register variables

        // Geometry variables
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(NORMALIZED_SURFACE_NORMAL);

        // Optimization variables
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(DF1DX);

        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(DF1DX_MAPPED);

        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(DC1DX);
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(DC2DX);
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(DC3DX);
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(DC4DX);
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(DC5DX);
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(DC6DX);
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(DC7DX);
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(DC8DX);
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(DC9DX);

        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(DC1DX_MAPPED);
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(DC2DX_MAPPED);
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(DC3DX_MAPPED);
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(DC4DX_MAPPED);
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(DC5DX_MAPPED);
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(DC6DX_MAPPED);
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(DC7DX_MAPPED);
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(DC8DX_MAPPED);
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(DC9DX_MAPPED);

        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(SEARCH_DIRECTION);
        KRATOS_REGISTER_VARIABLE(INV_HESSIAN);
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(CORRECTION);
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(CONTROL_POINT_UPDATE);
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(CONTROL_POINT_CHANGE);
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(SHAPE_UPDATE);
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(SHAPE_CHANGE);
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(MESH_CHANGE);

        // For thickness
        KRATOS_REGISTER_VARIABLE(THICKNESS_SENSITIVITY);

        KRATOS_REGISTER_VARIABLE(DF1DT);
        KRATOS_REGISTER_VARIABLE(DF1DT_MAPPED);
        KRATOS_REGISTER_VARIABLE(DF1DT_PROJECTED);

        KRATOS_REGISTER_VARIABLE(LB_values);
        KRATOS_REGISTER_VARIABLE(LB_buffer_coeff);
        KRATOS_REGISTER_VARIABLE(DLBDT);
        KRATOS_REGISTER_VARIABLE(DLBDT_MAPPED);
        KRATOS_REGISTER_VARIABLE(UB_values);
        KRATOS_REGISTER_VARIABLE(UB_buffer_coeff);
        KRATOS_REGISTER_VARIABLE(DUBDT);
        KRATOS_REGISTER_VARIABLE(DUBDT_MAPPED);

        KRATOS_REGISTER_VARIABLE(DC1DT);
        KRATOS_REGISTER_VARIABLE(DC1DT_MAPPED);
        KRATOS_REGISTER_VARIABLE(DC1DT_PROJECTED);
        KRATOS_REGISTER_VARIABLE(DC2DT);
        KRATOS_REGISTER_VARIABLE(DC2DT_MAPPED);
        KRATOS_REGISTER_VARIABLE(DC2DT_PROJECTED);
        KRATOS_REGISTER_VARIABLE(DC3DT);
        KRATOS_REGISTER_VARIABLE(DC3DT_MAPPED);
        KRATOS_REGISTER_VARIABLE(DC3DT_PROJECTED);
        KRATOS_REGISTER_VARIABLE(DC4DT);
        KRATOS_REGISTER_VARIABLE(DC4DT_MAPPED);
        KRATOS_REGISTER_VARIABLE(DC4DT_PROJECTED);
        KRATOS_REGISTER_VARIABLE(DC5DT);
        KRATOS_REGISTER_VARIABLE(DC5DT_MAPPED);
        KRATOS_REGISTER_VARIABLE(DC5DT_PROJECTED);
        KRATOS_REGISTER_VARIABLE(DC6DT);
        KRATOS_REGISTER_VARIABLE(DC6DT_MAPPED);
        KRATOS_REGISTER_VARIABLE(DC6DT_PROJECTED);
        KRATOS_REGISTER_VARIABLE(DC7DT);
        KRATOS_REGISTER_VARIABLE(DC7DT_MAPPED);
        KRATOS_REGISTER_VARIABLE(DC7DT_PROJECTED);
        KRATOS_REGISTER_VARIABLE(DC8DT);
        KRATOS_REGISTER_VARIABLE(DC8DT_MAPPED);
        KRATOS_REGISTER_VARIABLE(DC8DT_PROJECTED);
        KRATOS_REGISTER_VARIABLE(DC9DT);
        KRATOS_REGISTER_VARIABLE(DC9DT_MAPPED);
        KRATOS_REGISTER_VARIABLE(DC9DT_PROJECTED);

        KRATOS_REGISTER_VARIABLE(INV_HESSIAN_THICKNESS);
        KRATOS_REGISTER_VARIABLE(THICKNESS_SEARCH_DIRECTION);
        KRATOS_REGISTER_VARIABLE(THICKNESS_CORRECTION);
        KRATOS_REGISTER_VARIABLE(THICKNESS_PROJECTION);

        KRATOS_REGISTER_VARIABLE(THICKNESS_CONTROL);
        KRATOS_REGISTER_VARIABLE(THICKNESS_CONTROL_UPDATE);
        KRATOS_REGISTER_VARIABLE(THICKNESS_CONTROL_CHANGE);

        KRATOS_REGISTER_VARIABLE(THICKNESS);
        KRATOS_REGISTER_VARIABLE(THICKNESS_ELEMENTAL);
        KRATOS_REGISTER_VARIABLE(THICKNESS_ELEMENTAL_INITIAL);
        KRATOS_REGISTER_VARIABLE(THICKNESS_UPDATE);
        KRATOS_REGISTER_VARIABLE(THICKNESS_CHANGE);

        // for thickness optimization with change as design variable
        KRATOS_REGISTER_VARIABLE(THICKNESS_INITIAL);
        KRATOS_REGISTER_VARIABLE(THICKNESS_CHANGE_CONTROL);
        KRATOS_REGISTER_VARIABLE(THICKNESS_CHANGE_CONTROL_PROJECTED);
        KRATOS_REGISTER_VARIABLE(THICKNESS_CONTROL_PROJECTED_UPDATE);

        // For edge damping
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(DAMPING_FACTOR);

        // For thickness damping
        KRATOS_REGISTER_VARIABLE(DAMPING_FACTOR_T);

        // For mapping
        KRATOS_REGISTER_VARIABLE(MAPPING_ID);

        // For adaptive filter
        KRATOS_REGISTER_VARIABLE(VERTEX_MORPHING_RADIUS);
        KRATOS_REGISTER_VARIABLE(VERTEX_MORPHING_RADIUS_RAW);
        KRATOS_REGISTER_VARIABLE(GAUSSIAN_CURVATURE);
        KRATOS_REGISTER_VARIABLE(MAX_NEIGHBOUR_DISTANCE);

        // For bead optimization
        KRATOS_REGISTER_VARIABLE(ALPHA);
        KRATOS_REGISTER_VARIABLE(ALPHA_MAPPED);
        KRATOS_REGISTER_VARIABLE(DF1DALPHA);
        KRATOS_REGISTER_VARIABLE(DF1DALPHA_MAPPED);
        KRATOS_REGISTER_VARIABLE(DPDALPHA);
        KRATOS_REGISTER_VARIABLE(DPDALPHA_MAPPED);
        KRATOS_REGISTER_VARIABLE(DLDALPHA);
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(BEAD_DIRECTION);

        // For shape fraction optimization
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(DP1DX);
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(DPF1DX);

        // For auxiliary operations
        KRATOS_REGISTER_VARIABLE(SCALAR_VARIABLE);
        KRATOS_REGISTER_VARIABLE(SCALAR_VARIABLE_MAPPED);
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(VECTOR_VARIABLE);
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(VECTOR_VARIABLE_MAPPED);

        // For in plane mapping operations
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(BACKGROUND_COORDINATE);
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(BACKGROUND_NORMAL);
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(OUT_OF_PLANE_DELTA);

        // For face angle response
        KRATOS_REGISTER_VARIABLE(CONSIDER_FACE_ANGLE);

        // For water drain response
        KRATOS_REGISTER_VARIABLE(WATER_LEVEL);
        KRATOS_REGISTER_VARIABLE(WATER_VOLUMES);

        // For directional derivative response
        KRATOS_REGISTER_VARIABLE(ADJACENT_FACES);

	    // For sensitivity heatmap
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(HEATMAP_DF1DX);
        KRATOS_REGISTER_VARIABLE(HEATMAP_DF1DALPHA);

        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(HEATMAP_DC1DX);
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(HEATMAP_DC2DX);
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(HEATMAP_DC3DX);
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(HEATMAP_DC4DX);
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(HEATMAP_DC5DX);
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(HEATMAP_DC6DX);
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(HEATMAP_DC7DX);
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(HEATMAP_DC8DX);
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(HEATMAP_DC9DX);

        KRATOS_REGISTER_VARIABLE(HEATMAP_MAX);
        KRATOS_REGISTER_VARIABLE(HEATMAP_L2);

        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(DF1DX_WEIGHTED);
        KRATOS_REGISTER_VARIABLE(DF1DALPHA_WEIGHTED);

        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(DC1DX_WEIGHTED);
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(DC2DX_WEIGHTED);
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(DC3DX_WEIGHTED);
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(DC4DX_WEIGHTED);
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(DC5DX_WEIGHTED);
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(DC6DX_WEIGHTED);
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(DC7DX_WEIGHTED);
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(DC8DX_WEIGHTED);
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(DC9DX_WEIGHTED);

        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(DF1DX_WEIGHTED_MAPPED);
        KRATOS_REGISTER_VARIABLE(DF1DALPHA_WEIGHTED_MAPPED);

        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(DC1DX_WEIGHTED_MAPPED);
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(DC2DX_WEIGHTED_MAPPED);
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(DC3DX_WEIGHTED_MAPPED);
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(DC4DX_WEIGHTED_MAPPED);
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(DC5DX_WEIGHTED_MAPPED);
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(DC6DX_WEIGHTED_MAPPED);
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(DC7DX_WEIGHTED_MAPPED);
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(DC8DX_WEIGHTED_MAPPED);
        KRATOS_REGISTER_3D_VARIABLE_WITH_COMPONENTS(DC9DX_WEIGHTED_MAPPED);

 	}

}  // namespace Kratos.


